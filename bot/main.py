import asyncio
import logging
from typing import Optional, Dict, List

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup,
    InlineKeyboardButton, InputMediaPhoto
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage

from database import Database
from parsers.cian import CianParser
from parsers.avito import AvitoParser
from parsers.telegram import TelegramParser
from payment import PaymentSystem
from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = RedisStorage.from_url(f"redis://{settings.REDIS_HOST}:{settings.REDIS_PORT}")
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(
    db_url=f"postgresql://{settings.DB_USER}:{settings.DB_PASSWORD}@{settings.DB_HOST}:{settings.DB_PORT}/{settings.DB_NAME}"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
payment = PaymentSystem(yoomoney_token=settings.YOOMONEY_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
cian_parser = CianParser(db=db)
avito_parser = AvitoParser(db=db)
telegram_parser = TelegramParser(db=db)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    SET_FILTERS = State()
    SET_PRICE = State()
    SET_AREA = State()
    SET_ROOMS = State()
    SET_DISTRICTS = State()
    SET_PROPERTY_TYPE = State()

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
class PollyParserBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token, parse_mode=ParseMode.HTML)
        self.active_parsers = {
            'cian': cian_parser,
            'avito': avito_parser,
            'telegram': telegram_parser
        }

    async def start(self):
        await dp.start_polling(self.bot)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    def register_handlers(self):
        dp.message.register(self.handle_start, CommandStart())
        dp.message.register(self.handle_help, Command('help'))
        dp.callback_query.register(self.handle_main_menu, F.data.in_([
            'main_menu', 'search', 'filters', 'tariffs', 'promo', 'ref', 'support'
        ]))
        dp.callback_query.register(self.handle_show_contact, F.data.startswith('contact_'))
        dp.callback_query.register(self.handle_payment, F.data.startswith('pay_'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def handle_start(self, message: Message):
        user_id = message.from_user.id
        username = message.from_user.username
        ref_code = message.text.split()[1] if len(message.text.split()) > 1 else None

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.register_user(user_id, username, ref_code)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await message.answer(
            "üè† <b>Polly Parser</b> - —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ\n\n"
            "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —á–∞—Å—Ç–Ω—ã—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ –¶–ò–ê–ù, –ê–≤–∏—Ç–æ –∏ –≤ Telegram-—á–∞—Ç–∞—Ö.",
            reply_markup=self.main_menu_kb()
        )

    async def handle_help(self, message: Message):
        await message.answer(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ <b>–ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b> –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º\n"
            "2. –í <b>–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã</b> –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–¢–∞—Ä–∏—Ñ—ã</b>\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ <b>–ü–æ–¥–¥–µ—Ä–∂–∫—É</b>",
            reply_markup=self.main_menu_kb()
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    async def handle_main_menu(self, callback: CallbackQuery):
        action = callback.data

        if action == 'main_menu':
            await callback.message.edit_text(
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
                reply_markup=self.main_menu_kb()
            )
        elif action == 'search':
            await self.handle_search(callback)
        elif action == 'filters':
            await self.handle_filters(callback)
        elif action == 'tariffs':
            await self.handle_tariffs(callback)
        elif action == 'promo':
            await self.handle_promo(callback)
        elif action == 'ref':
            await self.handle_ref(callback)
        elif action == 'support':
            await self.handle_support(callback)

    async def handle_search(self, callback: CallbackQuery):
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not await db.check_subscription(user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!", show_alert=True)
            await self.handle_tariffs(callback)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if await db.get_daily_requests(user_id) >= 100:
            await callback.answer("‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!", show_alert=True)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = await db.get_user_filters(user_id)
        if not filters:
            await callback.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã!", show_alert=True)
            await self.handle_filters(callback)
            return

        # –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await callback.message.edit_text("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
        listings = await db.get_listings(filters)

        if not listings:
            await callback.message.edit_text(
                "üòï –ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=self.main_menu_kb()
            )
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await self.send_listings(callback.message, listings[:25])
        await db.increment_requests(user_id)

    async def handle_filters(self, callback: CallbackQuery):
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=self.filters_menu_kb()
        )

    async def handle_tariffs(self, callback: CallbackQuery):
        user_id = callback.from_user.id
        sub_info = await db.get_subscription_info(user_id)

        text = "üí∞ <b>–¢–∞—Ä–∏—Ñ—ã</b>\n\n"
        if sub_info:
            text += f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {sub_info['expires_at']}\n\n"

        text += (
            "1. <b>24 —á–∞—Å–∞</b> - 300‚ÇΩ\n"
            "2. <b>30 –¥–Ω–µ–π</b> - 2900‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 10%)\n"
            "3. <b>365 –¥–Ω–µ–π</b> - 23000‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 35%)\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )

        await callback.message.edit_text(
            text,
            reply_markup=self.tariffs_menu_kb()
        )

    async def handle_promo(self, callback: CallbackQuery):
        await callback.message.edit_text(
            "üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
            reply_markup=self.back_to_menu_kb()
        )
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ FSM

    async def handle_ref(self, callback: CallbackQuery):
        user_id = callback.from_user.id
        ref_link = f"https://t.me/{settings.BOT_USERNAME}?start=ref{user_id}"
        ref_count = await db.get_ref_count(user_id)
        ref_balance = await db.get_ref_balance(user_id)

        await callback.message.edit_text(
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{ref_count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{ref_balance}‚ÇΩ</b>\n\n"
            "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π",
            reply_markup=self.back_to_menu_kb()
        )

    async def handle_support(self, callback: CallbackQuery):
        await callback.message.edit_text(
            "üõ† <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @polly_support\n"
            "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤",
            reply_markup=self.back_to_menu_kb()
        )

    async def handle_show_contact(self, callback: CallbackQuery):
        listing_id = int(callback.data.split('_')[1])
        contact = await db.get_listing_contact(listing_id)

        if not contact:
            await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
        temp_link = await self.generate_temp_contact_link(contact)
        await callback.answer()
        await callback.message.answer(
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {temp_link}\n\n"
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è",
            disable_web_page_preview=True
        )

    async def handle_payment(self, callback: CallbackQuery):
        tariff = callback.data.split('_')[1]
        user_id = callback.from_user.id

        payment_url = await payment.create_payment_link(
            user_id=user_id,
            amount=self.get_tariff_price(tariff),
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ Polly Parser ({tariff})"
        )

        await callback.message.edit_text(
            "üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"–¢–∞—Ä–∏—Ñ: <b>{self.get_tariff_name(tariff)}</b>\n"
            f"–°—É–º–º–∞: <b>{self.get_tariff_price(tariff)}‚ÇΩ</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_pay_{tariff}")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="tariffs")]
            ])
        )

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def main_menu_kb(self):
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="search"),
            InlineKeyboardButton(text="‚öôÔ∏è –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filters"),
            InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="tariffs"),
            InlineKeyboardButton(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo"),
            InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="ref"),
            InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        )
        builder.adjust(2)
        return builder.as_markup()

    def filters_menu_kb(self):
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="set_price"),
            InlineKeyboardButton(text="üìè –ü–ª–æ—â–∞–¥—å", callback_data="set_area"),
            InlineKeyboardButton(text="üö™ –ö–æ–º–Ω–∞—Ç—ã", callback_data="set_rooms"),
            InlineKeyboardButton(text="üó∫ –†–∞–π–æ–Ω—ã", callback_data="set_districts"),
            InlineKeyboardButton(text="üèò –¢–∏–ø –∂–∏–ª—å—è", callback_data="set_property_type"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        builder.adjust(2)
        return builder.as_markup()

    def tariffs_menu_kb(self):
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="24 —á–∞—Å–∞ - 300‚ÇΩ", callback_data="pay_day"),
            InlineKeyboardButton(text="30 –¥–Ω–µ–π - 2900‚ÇΩ", callback_data="pay_month"),
            InlineKeyboardButton(text="365 –¥–Ω–µ–π - 23000‚ÇΩ", callback_data="pay_year"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        builder.adjust(1)
        return builder.as_markup()

    def back_to_menu_kb(self):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

    async def send_listings(self, message: Message, listings: List[Dict]):
        for listing in listings:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìû –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
                    callback_data=f"contact_{listing['id']}"
                )]
            ])

            text = (
                f"üè† <b>{listing['source']}</b>\n"
                f"üí∞ <b>{listing['price']:,}‚ÇΩ</b>\n"
                f"üìç <b>{listing['district']}</b>\n"
                f"üìè <b>{listing['area']}–º¬≤</b> ({listing['rooms']}–∫)\n"
                f"üè¢ <b>{listing['floor']}/{listing['total_floors']} —ç—Ç–∞–∂</b>\n"
                f"üïí <i>{listing['posted_at']}</i>"
            )

            if listing.get('photo_urls'):
                media = InputMediaPhoto(
                    media=listing['photo_urls'][0],
                    caption=text
                )
                await message.answer_media_group([media])
                await message.answer("‚ÜóÔ∏è", reply_markup=kb)
            else:
                await message.answer(text, reply_markup=kb)

            await asyncio.sleep(0.5)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞

    async def generate_temp_contact_link(self, contact: str) -> str:
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
        token = await db.create_temp_contact_token(contact)
        return f"{settings.WEBHOOK_URL}/contact/{token}"

    def get_tariff_name(self, tariff: str) -> str:
        names = {
            'day': '24 —á–∞—Å–∞',
            'month': '30 –¥–Ω–µ–π',
            'year': '365 –¥–Ω–µ–π'
        }
        return names.get(tariff, '')

    def get_tariff_price(self, tariff: str) -> int:
        prices = {
            'day': 300,
            'month': 2900,
            'year': 23000
        }
        return prices.get(tariff, 0)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏
    async def start_parsers(self):
        for name, parser in self.active_parsers.items():
            asyncio.create_task(self.run_parser(name, parser))

    async def run_parser(self, name: str, parser):
        while True:
            try:
                logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ {name}")
                await parser.run()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ {name}: {e}")
                await self.notify_admin(f"üö® –ü–∞—Ä—Å–µ—Ä {name} —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º
            delay = 1800 if name != 'telegram' else 600  # 30 –∏–ª–∏ 10 –º–∏–Ω—É—Ç
            await asyncio.sleep(delay)

    async def notify_admin(self, text: str):
        await self.bot.send_message(settings.ADMIN_ID, text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = PollyParserBot(token=settings.BOT_TOKEN)
    bot.register_handlers()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    
    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤
    await bot.start_parsers()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.start()

if __name__ == "__main__":
    asyncio.run(main())